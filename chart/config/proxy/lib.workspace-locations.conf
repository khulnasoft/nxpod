{{- $this := dict "root" . "gp" $.Values }}
include lib.resolver.conf;

{{- $wsProxy := .Values.components.wsProxy -}}
{{- if (and $wsProxy (not $wsProxy.disabled)) }}
location / {
    include lib.proxy.conf;
    include lib.ws-sse.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # Set max body size to make big uploads work
    client_max_body_size 2048m;

    # disable the error log to not spam our logs when the kube DNS doesn't know about the service yet
    error_log off;

    proxy_set_header x-wsproxy-host $host;
    proxy_pass http://wsproxy$request_uri;
}
{{- else }}

location / {
    include lib.proxy.conf;
    include lib.cors-headers.conf;
    include lib.gzip-assets.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # Set max body size to make big uploads work
    client_max_body_size 2048m;

    # On connection errors, redirect to workspace page
    error_page 502 504 =200 @workspace_not_found;

    # If not logged in, redirect to login page
    error_page 401 =200 @workspace_not_logged_in;

    # On access denied, redirect to sorry page
    error_page 403 =200 @workspace_not_authorized;

    # Authentication
    auth_request /auth/workspace;

    # disable the error log to not spam our logs when the kube DNS doesn't know about the service yet
    error_log off;

    error_page 404 = @workspace;
    proxy_pass http://theiaserver$request_uri;
}
location @workspace {
    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

# Special rule for the mini-browser GET endpoint:
# Do not handle errors but forward them
location /mini-browser {
    include lib.proxy.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # CORS
    include lib.cors-headers.conf;

    # Authentication
    # On authentication denied, respond with that error
    auth_request /auth/workspace;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

location /files {
    include lib.proxy.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # CORS
    include lib.cors-headers.conf;

    # Authentication
    # On authentication denied, respond with that error
    auth_request /auth/workspace;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

location /file {
    include lib.proxy.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # CORS
    include lib.cors-headers.conf;

    # Authentication
    # On authentication denied, respond with that error
    auth_request /auth/workspace;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

location /hostedPlugin {
    include lib.proxy.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # CORS
    include lib.cors-headers.conf;

    # Authentication
    # On authentication denied, respond with that error
    auth_request /auth/workspace;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

# For now the Theia websocket connection does not get the authentication check as that leads to websocket client timeouts
location /service {
    auth_request /auth/workspace;
    include lib.workspace-locations.ws.conf;
}
location /file-upload {
    auth_request /auth/workspace;
    include lib.workspace-locations.ws.conf;
}

# The IDE ready probe must not have an authentication check as it's used by the ws-monitor
location /nxpod/ready {
    include lib.proxy.conf;
    include lib.ws-sse.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # On connection errors, redirect to workspace page
    error_page 502 504 =200 @workspace_not_found;

    # CORS
    include lib.cors-headers.conf;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

# The workspace supervisor ready probe must not have an authentication check
location /supervisor/ready {
    include lib.proxy.conf;
    include lib.ws-sse.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # On connection errors, redirect to workspace page
    error_page 502 504 =200 @workspace_not_found;

    # CORS
    include lib.cors-headers.conf;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.supervisorPort }}/;
}

# Webviews are passed to the running theia backend directly, without any error handling
location /webview {
    include lib.proxy.conf;
    include lib.ws-sse.conf;

    include lib.cors-headers.conf;
    
    # Increase connect timeout
    proxy_connect_timeout 10s;

    proxy_pass http://ws-${wsid}-theia.${KUBE_NAMESPACE}.svc.cluster.local:{{ .Values.components.workspace.ports.http.containerPort }}$request_uri;
}

location @workspace_not_found {
    return 302 {{ template "nxpod.scheme" $this }}://{{.Values.hostname}}/start/#$wsid;
}

location @workspace_not_logged_in {
    set $return_to {{ template "nxpod.scheme" $this }}://$host$request_uri;
    return 302 {{ template "nxpod.scheme" $this }}://{{.Values.hostname}}/login/?returnTo=$return_to;
}

location @workspace_not_authorized {
    return 302 {{ template "nxpod.scheme" $this }}://{{.Values.hostname}}/sorry/#Workspace%20$wsid%20is%20not%20shared;
}

location /auth/workspace {
    include lib.proxy.conf;
    internal;

    proxy_pass http://apiserver/auth/workspace;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    client_max_body_size 0;
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Original-IP  $remote_addr;
    proxy_set_header Set-Cookie "nxpod=$cookie_nxpod";
}
{{- end }}
