{{- if not .Values.components.cerc.disabled}}

# get status of all health checks from cerc
location /status {
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host:$server_port;

    # deliver error pages from cerc (for a unhealthy status report)
    proxy_intercept_errors off;

{{ if .Values.components.proxy.statusAuth }}
    auth_basic "{{ $.Values.hostname }}";
    auth_basic_user_file "status-endpoints.htpasswd";
{{ end }}

    # using a variable to trigger proper name resolution. See https://serverfault.com/questions/240476/how-to-force-nginx-to-resolve-dns-of-a-dynamic-hostname-everytime-when-doing-p
    set $backend "http://cerc.${KUBE_NAMESPACE}.svc.cluster.local$request_uri";
    proxy_pass $backend;
}

# called from within the probe workspace
location /cerc/callback {
    include lib.proxy.conf;

    # using a variable to trigger proper name resolution. See https://serverfault.com/questions/240476/how-to-force-nginx-to-resolve-dns-of-a-dynamic-hostname-everytime-when-doing-p
    set $backend "http://cerc.${KUBE_NAMESPACE}.svc.cluster.local$request_uri_cerc_dropped";
    proxy_pass $backend;
}
{{- end }}
